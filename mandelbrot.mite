fn fastlog2(x: f64): f64 {
    let vx = reinterpret(f32(x));
    let mx = reinterpret(u32((vx & 0x007FFFFF) | 0x3f000000));
    let y: f32 = f32(vx) * 0.00000011920928955078125;

    return f64(y - f32(124.22551499) - f32(1.498030302) * mx - f32(1.72587999) / (f32(0.3520887068) + mx));
}

fn log(x: f64): f64 {
    return 0.69314718 * fastlog2(x);
}

fn interpolation(f: f64, c0: u32, c1: u32): u32 {
    let r0 = c0 >> 16 & 0xFF;
    let g0 = c0 >> 8  & 0xFF;
    let b0 = c0 >> 0  & 0xFF;
    let r1 = c1 >> 16 & 0xFF;
    let g1 = c1 >> 8  & 0xFF;
    let b1 = c1 >> 0  & 0xFF;
    let r = u32((1.0 - f) * f64(r0) + f * f64(r1) + 0.5);
    let g = u32((1.0 - f) * f64(g0) + f * f64(g1) + 0.5);
    let b = u32((1.0 - f) * f64(b0) + f * f64(b1) + 0.5);
    return r << 16 | g << 8 | b << 0;
}

fn get_color(d: f64): u32 {
    if (d >= 0.0) {
        let k = 0.021 * (d - 1.0 + log(log(128.0)) / log(2.0));
        k = log(1.0 + k) - 29.0 / 400.0;
        k -= f64(floor(k));
        k *= 400.0;
        if (k < 63.0) {
            return interpolation(k / 63.0, 0x000764, 0x206BCB);
        } else if (k < 167.0) {
            return interpolation((k - 63.0) / (167.0 - 63.0), 0x206BCB, 0xEDFFFF);
        } else if (k < 256.0) {
            return interpolation((k - 167.0) / (256.0 - 167.0), 0xEDFFFF, 0xFFAA00);
        } else if (k < 342.0) {
            return interpolation((k - 256.0) / (342.0 - 256.0), 0xFFAA00, 0x310230);
        } else {
            return interpolation((k - 342.0) / (400.0 - 342.0), 0x310230, 0x000764);
        };
    } else {
        return 0x000000;
    };
}

fn calc_color(col: u32, row: u32, ox: f64, oy: f64, width: f64): u32 {
    let pixel_size = width / 800.0;
    let cx = (f64(col) - 399.5) * pixel_size + ox;
    let cy = (f64(row) - 300.0) * pixel_size + oy;
    let zr = cx;
    let zi = cy;
    let k = 0;
    while ((k += 1) < 1000) {
        let zr1 = zr * zr - zi * zi + cx;
        let zi1 = zr * zi + zr * zi + cy;
        zr = zr1;
        zi = zi1;
        if (zr * zr + zi * zi >= 4.0) {
            break;
        };
    };
    if (k == 1000) {
        return get_color(0.0-1.0);
    } else {
        return get_color(f64(k) + 1.0 - log(log(zr * zr + zi * zi) * 0.5) / log(2.0));
    };
}

fn little_endian(num: u32): u32 {
    return ((num >> 24) & 0xff) | ((num << 8) & 0xff0000) | ((num >> 8) & 0xff00) | ((num << 24) & 0xff000000);
}

export fn generate_image(height: u32, width: u32, x: f64, y: f64, w: f64): [u32; 480000] {
    let data: [u32; 480000];
    for (let row = 0; row < height; row += 1) {
        for (let col = 0; col < width; col += 1) {
            let rgb = calc_color(col, row, x, y, w);
            let idx = row * 800 + col;

            data[idx] = little_endian((rgb << 8) | 0xFF);
        };
    };
    return data;
}
